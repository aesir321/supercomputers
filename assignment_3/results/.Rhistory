su_os_sb$arch <- "sb"
su_os_sb$alg <- "onesided"
su_os_hw <- getSpeedups(os_hw, bl_hw)
su_os_hw$arch <- "hw"
su_os_hw$alg <- "onesided"
speedup <- rbind(su_nb_sb, su_os_sb)
#Reshape the data for plotting
su_times <- speedup %>% data.table::melt(id.vars = c("size", "arch", "alg"),
measure.vars = c("compute", "MPI", "real"),
variable.name = "type",
value.name = "time")
cols_in_common <- c("size","arch","alg","type")
su_errors <- speedup %>% data.table::melt(id.vars = c("size", "arch", "alg"),
measure.vars = c("sd_dcomp", "sd_dmpi", "sd_dreal"),
variable.name = "type",
value.name = "error")
su_times[cols_in_common] <- lapply(su_times[cols_in_common], factor)
su_errors[cols_in_common] <- lapply(su_errors[cols_in_common], factor)
revalue(su_errors$type, c("sd_dcomp"="compute", "sd_dmpi"="MPI", "sd_dreal"="real"))
su_times$type<-factor(su_times$type, levels=c("compute", "MPI", "real"))
su_errors$type<-factor(su_errors$type, levels=c("compute", "MPI", "real"))
joined <- inner_join(su_times, su_errors, by = cols_in_common )
View(joined)
View(su_errors)
View(su_times)
su_errors$type<-factor(su_errors$type, levels=c("compute", "MPI", "real"))
View(su_errors)
su_errors <- speedup %>% data.table::melt(id.vars = c("size", "arch", "alg"),
measure.vars = c("sd_dcomp", "sd_dmpi", "sd_dreal"),
variable.name = "type",
value.name = "error")
View(su_errors)
su_errors[cols_in_common] <- lapply(su_errors[cols_in_common], factor)
View(su_errors)
revalue(su_errors$type, c("sd_dcomp"="compute", "sd_dmpi"="MPI", "sd_dreal"="real"))
View(su_errors)
levels(su_times$type)
su_errors <- speedup %>% data.table::melt(id.vars = c("size", "arch", "alg"),
measure.vars = c("sd_dcomp", "sd_dmpi", "sd_dreal"),
variable.name = "type",
value.name = "error")
su_times[cols_in_common] <- lapply(su_times[cols_in_common], factor)
su_errors[cols_in_common] <- lapply(su_errors[cols_in_common], factor)
levels(su_errors$type)[su_errors$type==sd_dmpi] <- "MPI"
levels(su_errors$type)
levels(su_errors$type) <- c("compute", "MPI", "real")
levels(su_errors$type)
su_times$type<-factor(su_times$type, levels=c("compute", "MPI", "real"))
su_errors$type<-factor(su_errors$type, levels=c("compute", "MPI", "real"))
joined <- inner_join(su_times, su_errors, by = cols_in_common )
View(joined)
ggplot(su_times, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point()
ggplot(joined, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point()
View(joined)
ggplot(joined, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point() +
geom_errorbar(aes(ymin=time-error, ymax=time+error))
ggplot(joined, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point() +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=0))
ggplot(joined, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point() +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1))
ggplot(joined, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point() +
scale_y_continuous(limits = c(0,2))
ggplot(joined, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point() +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1))
ggplot(joined, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point(size=3) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1))
ggplot(joined, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1))
blah <-bind_speedup_data(su_nb_sb, su_os_sb)
bind_speedup_data <- function(df1, df2) {
speedup <- rbind(df1, df2)
#Reshape the data for plotting
su_times <- speedup %>% data.table::melt(id.vars = c("size", "arch", "alg"),
measure.vars = c("compute", "MPI", "real"),
variable.name = "type",
value.name = "time")
cols_in_common <- c("size","arch","alg","type")
su_errors <- speedup %>% data.table::melt(id.vars = c("size", "arch", "alg"),
measure.vars = c("sd_dcomp", "sd_dmpi", "sd_dreal"),
variable.name = "type",
value.name = "error")
su_times[cols_in_common] <- lapply(su_times[cols_in_common], factor)
su_errors[cols_in_common] <- lapply(su_errors[cols_in_common], factor)
#have to manually fix the level assignment so it matches
levels(su_errors$type) <- c("compute", "MPI", "real")
su_times$type<-factor(su_times$type, levels=c("compute", "MPI", "real"))
su_errors$type<-factor(su_errors$type, levels=c("compute", "MPI", "real"))
joined <- inner_join(su_times, su_errors, by = cols_in_common )
return(joined)
}
blah <-bind_speedup_data(su_nb_sb, su_os_sb)
View(blah)
speedup <- rbind(su_nb_hw, su_os_hw)
View(blah)
blah <-bind_speedup_data(su_nb_hw, su_os_hw)
View(blah)
hw_speedup <-bind_speedup_data(su_nb_hw, su_os_hw)
sb_speedup <-bind_speedup_data(su_nb_sb, su_os_sb)
library(data.table)
library(ggplot2)
library(dplyr)
library(data.table)
library(tidyr)
setwd( "C:/Users/Patrick/Desktop/MegaSync/results" )
datadir <- "C:/Users/Patrick/Desktop/MegaSync/results"
baseline_file_sb <- file.path(datadir, "baseline_sb.txt")
baseline_file_hw <- file.path(datadir, "baseline_hw.txt")
clean_data <- function(dt) {
colnames(dt) <- c("size", "comp_time", "mpi_time", "real_time")
means <- dt[, lapply(.SD, mean), by="size", .SDcols = c("comp_time", "mpi_time", "real_time")]
sds <- dt[, lapply(.SD, sd), by="size", .SDcols = c("comp_time", "mpi_time", "real_time")]
colnames(sds) <- c("size", "sd_comp", "sd_mpi", "sd_real")
dt_full <- full_join(means, sds, by = "size")
return (dt_full)
}
dt <- fread(baseline_file_sb)
colnames(dt) <- c("size", "comp_time", "mpi_time", "real_time")
dt_sb <- dt[, lapply(.SD, mean), by="size", .SDcols = c("comp_time", "mpi_time", "real_time")]
dt_sb_SD <- dt[, lapply(.SD, sd), by="size", .SDcols = c("comp_time", "mpi_time", "real_time")]
colnames(dt_sb_SD) <- c("size", "sd_comp", "sd_mpi", "sd_real")
dt_sb[, arch:="sb"]
dt_sb_SD[,arch:="sb"]
dt2 <- fread(baseline_file_hw)
colnames(dt2) <- c("size", "comp_time", "mpi_time", "real_time")
dt_hw <- dt2[, lapply(.SD, mean), by="size", .SDcols = c("comp_time", "mpi_time", "real_time")]
dt_hw_SD <- dt2[, lapply(.SD, sd), by="size", .SDcols = c("comp_time", "mpi_time", "real_time")]
colnames(dt_hw_SD) <- c("size", "sd_comp", "sd_mpi", "sd_real")
dt_hw[, arch:="hw"]
dt_hw_SD[,arch:="hw"]
data_data <- full_join(dt_hw, dt_sb)
error_data <- full_join(dt_sb_SD, dt_hw_SD)
all_data <- left_join(data_data, error_data, by = c("size","arch"))
ggplot(all_data, aes(size, mpi_time, color=arch)) +
geom_point(alpha=0.3) +
geom_errorbar(aes(ymin=mpi_time-sd_mpi, ymax=mpi_time+sd_mpi)) +
ggtitle("Cannon MPI time vs square matrix size") +
labs(x="square matrix number of rows", y="mpi time (s)") +
ggsave(filename="mpi_time.png", dpi=600)
ggplot(all_data, aes(size, real_time, color=arch)) +
geom_point(alpha=0.3) +
geom_errorbar(aes(ymin=real_time-sd_real, ymax=real_time+sd_real)) +
ggtitle("Cannon time to solution vs square matrix size") +
labs(x="square matrix number of rows", y="total time (s)") +
ggsave(filename="real_time.png", dpi=600)
ggplot(all_data, aes(size, comp_time, color=arch)) +
geom_point(alpha=0.3) +
geom_errorbar(aes(ymin=comp_time-sd_comp, ymax=comp_time+sd_comp)) +
ggtitle("Cannon computation time vs square matrix size") +
labs(x="square matrix number of rows", y="compute time (s)") +
ggsave(filename="comp_time.png", dpi=600)
ggplot(all_data, aes(size, real_time, color=arch)) +
geom_point(alpha=0.3) +
scale_x_log10() +
scale_y_log10() +
labs(x="log10(square matrix number of rows)", y="log10(real time)") +
ggtitle("log-log - Real time vs matrix size") +
ggsave(filename="log_log_real.png", dpi=600)
###### Now process the non-baseline files
nb_hw_file <- file.path(datadir, "nonblocking_hw.txt")
nb_sb_file <- file.path(datadir, "nonblocking_sb.txt")
os_hw_file <- file.path(datadir, "onesided_hw.txt")
os_sb_file <- file.path(datadir, "onesided_sb.txt")
dt_nb_sb <- fread(nb_sb_file)
dt_nb_hw <- fread(nb_hw_file)
dt_os_sb <- fread(os_sb_file)
dt_os_hw <- fread(os_hw_file)
nb_hw <- clean_data(dt_nb_hw)
nb_sb <- clean_data(dt_nb_sb)
os_hw <- clean_data(dt_os_hw)
os_sb <- clean_data(dt_os_sb)
bl_sb <- clean_data(dt)
bl_hw <- clean_data(dt2)
#now calculate the speedups
getSpeedups <-function (df, bl) {
temp <- bl[,2:4] / df[,2:4]
temp$size <- bl$size
temp[,5:7] <-  bl[,2:4] / df[,2:4] * sqrt ( (bl[,5:7])^2 + (df[,5:7])^2 )
colnames(temp) <- c("compute", "MPI", "real","size", "sd_dcomp", "sd_dmpi", "sd_dreal")
return(temp[,c(4,1,2,3,5,6,7)])
}
su_nb_sb <- getSpeedups(nb_sb, bl_sb)
su_nb_sb$arch <- "sb"
su_nb_sb$alg <- "nonblocking"
su_nb_hw <- getSpeedups(nb_hw, bl_hw)
su_nb_hw$arch <- "hw"
su_nb_hw$alg <- "nonblocking"
su_os_sb <- getSpeedups(os_sb, bl_sb)
su_os_sb$arch <- "sb"
su_os_sb$alg <- "onesided"
su_os_hw <- getSpeedups(os_hw, bl_hw)
su_os_hw$arch <- "hw"
su_os_hw$alg <- "onesided"
bind_speedup_data <- function(df1, df2) {
speedup <- rbind(df1, df2)
#Reshape the data for plotting
su_times <- speedup %>% data.table::melt(id.vars = c("size", "arch", "alg"),
measure.vars = c("compute", "MPI", "real"),
variable.name = "type",
value.name = "time")
cols_in_common <- c("size","arch","alg","type")
su_errors <- speedup %>% data.table::melt(id.vars = c("size", "arch", "alg"),
measure.vars = c("sd_dcomp", "sd_dmpi", "sd_dreal"),
variable.name = "type",
value.name = "error")
su_times[cols_in_common] <- lapply(su_times[cols_in_common], factor)
su_errors[cols_in_common] <- lapply(su_errors[cols_in_common], factor)
#have to manually fix the level assignment so it matches
levels(su_errors$type) <- c("compute", "MPI", "real")
su_times$type<-factor(su_times$type, levels=c("compute", "MPI", "real"))
su_errors$type<-factor(su_errors$type, levels=c("compute", "MPI", "real"))
joined <- inner_join(su_times, su_errors, by = cols_in_common )
return(joined)
}
hw_speedup <-bind_speedup_data(su_nb_hw, su_os_hw)
sb_speedup <-bind_speedup_data(su_nb_sb, su_os_sb)
ggplot(joined, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1))
View(sb_speedup)
View(hw_speedup)
ggplot(joined, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1))
ggplot(joined, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1))
ggplot(hw_speedup, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1))
ggplot(hw_speedup, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1)) +
labs(x="square matrix number of rows", y="speedup ratio T/T_baseline") +
ggtitle("Cannon algorithm times vs matrix size on Haswell architecture")
ggplot(sb_speedup, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1)) +
labs(x="square matrix number of rows", y="speedup ratio T/T_baseline") +
ggtitle("Cannon algorithm times vs matrix size on Haswell architecture")
ggplot(hw_speedup, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1)) +
labs(x="square matrix number of rows", y="speedup ratio T/T_baseline") +
ggtitle("Cannon algorithm times vs matrix size on Haswell architecture")
ggplot(hw_speedup, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1)) +
labs(x="square matrix number of rows", y="speedup ratio T/T_baseline") +
ggtitle("Cannon algorithm times vs matrix size on Haswell architecture")
ggplot(sb_speedup, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1)) +
labs(x="square matrix number of rows", y="speedup ratio T/T_baseline") +
ggtitle("Cannon algorithm times vs matrix size on Sandy Bridge architecture")
ggplot(sb_speedup, aes(size, time, col=type)) +
theme_classic() +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1)) +
labs(x="square matrix number of rows", y="speedup ratio T/T_baseline") +
ggtitle("Cannon algorithm times vs matrix size on Sandy Bridge architecture")
ggplot(sb_speedup, aes(size, time, col=type)) +
theme_dark() +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1)) +
labs(x="square matrix number of rows", y="speedup ratio T/T_baseline") +
ggtitle("Cannon algorithm times vs matrix size on Sandy Bridge architecture")
ggplot(sb_speedup, aes(size, time, col=type)) +
theme_classic() +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1)) +
labs(x="square matrix number of rows", y="speedup ratio T/T_baseline") +
ggtitle("Cannon algorithm times vs matrix size on Sandy Bridge architecture")
ggplot(sb_speedup, aes(size, time, col=type)) +
theme_bw() +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1)) +
labs(x="square matrix number of rows", y="speedup ratio T/T_baseline") +
ggtitle("Cannon algorithm times vs matrix size on Sandy Bridge architecture")
ggplot(sb_speedup, aes(size, time, col=type)) +
theme_light() +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1)) +
labs(x="square matrix number of rows", y="speedup ratio T/T_baseline") +
ggtitle("Cannon algorithm times vs matrix size on Sandy Bridge architecture")
ggplot(sb_speedup, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1)) +
labs(x="square matrix number of rows", y="speedup ratio T/T_baseline") +
ggtitle("Cannon algorithm times vs matrix size on Sandy Bridge architecture")
library(data.table)
library(ggplot2)
library(dplyr)
library(data.table)
library(tidyr)
setwd( "C:/Users/Patrick/Desktop/MegaSync/results" )
datadir <- "C:/Users/Patrick/Desktop/MegaSync/results"
baseline_file_sb <- file.path(datadir, "baseline_sb.txt")
baseline_file_hw <- file.path(datadir, "baseline_hw.txt")
clean_data <- function(dt) {
colnames(dt) <- c("size", "comp_time", "mpi_time", "real_time")
means <- dt[, lapply(.SD, mean), by="size", .SDcols = c("comp_time", "mpi_time", "real_time")]
sds <- dt[, lapply(.SD, sd), by="size", .SDcols = c("comp_time", "mpi_time", "real_time")]
colnames(sds) <- c("size", "sd_comp", "sd_mpi", "sd_real")
dt_full <- full_join(means, sds, by = "size")
return (dt_full)
}
dt <- fread(baseline_file_sb)
colnames(dt) <- c("size", "comp_time", "mpi_time", "real_time")
dt_sb <- dt[, lapply(.SD, mean), by="size", .SDcols = c("comp_time", "mpi_time", "real_time")]
dt_sb_SD <- dt[, lapply(.SD, sd), by="size", .SDcols = c("comp_time", "mpi_time", "real_time")]
colnames(dt_sb_SD) <- c("size", "sd_comp", "sd_mpi", "sd_real")
dt_sb[, arch:="sb"]
dt_sb_SD[,arch:="sb"]
dt2 <- fread(baseline_file_hw)
colnames(dt2) <- c("size", "comp_time", "mpi_time", "real_time")
dt_hw <- dt2[, lapply(.SD, mean), by="size", .SDcols = c("comp_time", "mpi_time", "real_time")]
dt_hw_SD <- dt2[, lapply(.SD, sd), by="size", .SDcols = c("comp_time", "mpi_time", "real_time")]
colnames(dt_hw_SD) <- c("size", "sd_comp", "sd_mpi", "sd_real")
dt_hw[, arch:="hw"]
dt_hw_SD[,arch:="hw"]
data_data <- full_join(dt_hw, dt_sb)
error_data <- full_join(dt_sb_SD, dt_hw_SD)
all_data <- left_join(data_data, error_data, by = c("size","arch"))
ggplot(all_data, aes(size, mpi_time, color=arch)) +
geom_point(alpha=0.3) +
geom_errorbar(aes(ymin=mpi_time-sd_mpi, ymax=mpi_time+sd_mpi)) +
ggtitle("Cannon MPI time vs square matrix size") +
labs(x="square matrix number of rows", y="mpi time (s)") +
ggsave(filename="mpi_time.png", dpi=600)
ggplot(all_data, aes(size, real_time, color=arch)) +
geom_point(alpha=0.3) +
geom_errorbar(aes(ymin=real_time-sd_real, ymax=real_time+sd_real)) +
ggtitle("Cannon time to solution vs square matrix size") +
labs(x="square matrix number of rows", y="total time (s)") +
ggsave(filename="real_time.png", dpi=600)
ggplot(all_data, aes(size, comp_time, color=arch)) +
geom_point(alpha=0.3) +
geom_errorbar(aes(ymin=comp_time-sd_comp, ymax=comp_time+sd_comp)) +
ggtitle("Cannon computation time vs square matrix size") +
labs(x="square matrix number of rows", y="compute time (s)") +
ggsave(filename="comp_time.png", dpi=600)
ggplot(all_data, aes(size, real_time, color=arch)) +
geom_point(alpha=0.3) +
scale_x_log10() +
scale_y_log10() +
labs(x="log10(square matrix number of rows)", y="log10(real time)") +
ggtitle("log-log - Real time vs matrix size") +
ggsave(filename="log_log_real.png", dpi=600)
###### Now process the non-baseline files
nb_hw_file <- file.path(datadir, "nonblocking_hw.txt")
nb_sb_file <- file.path(datadir, "nonblocking_sb.txt")
os_hw_file <- file.path(datadir, "onesided_hw.txt")
os_sb_file <- file.path(datadir, "onesided_sb.txt")
dt_nb_sb <- fread(nb_sb_file)
dt_nb_hw <- fread(nb_hw_file)
dt_os_sb <- fread(os_sb_file)
dt_os_hw <- fread(os_hw_file)
nb_hw <- clean_data(dt_nb_hw)
nb_sb <- clean_data(dt_nb_sb)
os_hw <- clean_data(dt_os_hw)
os_sb <- clean_data(dt_os_sb)
bl_sb <- clean_data(dt)
bl_hw <- clean_data(dt2)
#now calculate the speedups
getSpeedups <-function (df, bl) {
temp <- bl[,2:4] / df[,2:4]
temp$size <- bl$size
temp[,5:7] <-  bl[,2:4] / df[,2:4] * sqrt ( (bl[,5:7])^2 + (df[,5:7])^2 )
colnames(temp) <- c("compute", "MPI", "real","size", "sd_dcomp", "sd_dmpi", "sd_dreal")
return(temp[,c(4,1,2,3,5,6,7)])
}
su_nb_sb <- getSpeedups(nb_sb, bl_sb)
su_nb_sb$arch <- "sb"
su_nb_sb$alg <- "nonblocking"
su_nb_hw <- getSpeedups(nb_hw, bl_hw)
su_nb_hw$arch <- "hw"
su_nb_hw$alg <- "nonblocking"
su_os_sb <- getSpeedups(os_sb, bl_sb)
su_os_sb$arch <- "sb"
su_os_sb$alg <- "onesided"
su_os_hw <- getSpeedups(os_hw, bl_hw)
su_os_hw$arch <- "hw"
su_os_hw$alg <- "onesided"
bind_speedup_data <- function(df1, df2) {
cols_in_common <- c("size","arch","alg","type")
speedup <- rbind(df1, df2)
#Reshape the data for plotting
su_times <- speedup %>% data.table::melt(id.vars = c("size", "arch", "alg"),
measure.vars = c("compute", "MPI", "real"),
variable.name = "type",
value.name = "time")
su_errors <- speedup %>% data.table::melt(id.vars = c("size", "arch", "alg"),
measure.vars = c("sd_dcomp", "sd_dmpi", "sd_dreal"),
variable.name = "type",
value.name = "error")
su_times[cols_in_common] <- lapply(su_times[cols_in_common], factor)
su_errors[cols_in_common] <- lapply(su_errors[cols_in_common], factor)
#Manually fix the level assignment so it matches
levels(su_errors$type) <- c("compute", "MPI", "real")
su_times$type<-factor(su_times$type, levels=c("compute", "MPI", "real"))
su_errors$type<-factor(su_errors$type, levels=c("compute", "MPI", "real"))
joined <- inner_join(su_times, su_errors, by = cols_in_common )
return(joined)
}
hw_speedup <-bind_speedup_data(su_nb_hw, su_os_hw)
sb_speedup <-bind_speedup_data(su_nb_sb, su_os_sb)
ggplot(hw_speedup, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1)) +
labs(x="square matrix number of rows", y="speedup ratio T/T_baseline") +
ggtitle("Cannon algorithm times vs matrix size on Haswell architecture")
ggsave(filename="hw_speedup.png", dpi=600)
ggplot(sb_speedup, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1)) +
labs(x="square matrix number of rows", y="speedup ratio T/T_baseline") +
ggtitle("Cannon algorithm times vs matrix size on Sandy Bridge architecture")
ggsave(filename="sb_speedup.png", dpi=600)
ggsave(filename="sb_speedup.png", dpi=600, width=7.53, height=3.4)
ggsave(filename="sb_speedup.png", dpi=600, width=7.53, height=4.4)
ggplot(sb_speedup, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1)) +
labs(x="square matrix number of rows", y="speedup ratio T/T_baseline") +
ggtitle("Cannon algorithm times vs matrix size on Sandy Bridge architecture")
ggplot(hw_speedup, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1)) +
labs(x="square matrix number of rows", y="speedup ratio T/T_baseline") +
ggtitle("Cannon algorithm times vs matrix size on Haswell architecture")
ggsave(filename="hw_speedup.png", dpi=600, width=7.53, height=5.4)
ggplot(sb_speedup, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1)) +
labs(x="square matrix number of rows", y="speedup ratio T/T_baseline") +
ggtitle("Cannon algorithm times vs matrix size on Sandy Bridge architecture")
ggplot(hw_speedup, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1)) +
labs(x="square matrix number of rows", y="speedup ratio T/T_baseline") +
ggtitle("Cannon algorithm times vs matrix size on Haswell architecture")
ggsave(filename="hw_speedup.png", dpi=600, width=7.53, height=5.0)
ggplot(sb_speedup, aes(size, time, col=type)) +
facet_grid(alg ~.) +
geom_point(size=2, alpha=.7) +
scale_y_continuous(limits = c(0,2)) +
geom_errorbar(aes(ymin=time-error, ymax=time+error, width=.1)) +
labs(x="square matrix number of rows", y="speedup ratio T/T_baseline") +
ggtitle("Cannon algorithm times vs matrix size on Sandy Bridge architecture")
